{\rtf1\ansi \deff29\deflang1033{\fonttbl{\f5\fswiss\fcharset0\fprq2 Arial;}{\f11\fmodern\fcharset0\fprq1 Courier New;}{\f29\froman\fcharset128\fprq1 \'82l\'82r \'96\'be\'92\'a9;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\qj\nowidctlpar \f29\fs21\kerning2 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\qj\nowidctlpar\tqc\tx4320\tqr\tx8640 
\f29\fs21\kerning2 \sbasedon0\snext15 header;}{\s16\qj\nowidctlpar\tqc\tx4320\tqr\tx8640 \f29\fs21\kerning2 \sbasedon0\snext16 footer;}{\*\cs17 \additive\sbasedon10 page number;}}{\info{\title 1005}{\author \'8fH\'93c\'8f\'b9\'94\'fc}{\operator tshimizu}
{\creatim\yr1998\mo8\dy14\hr10\min7}{\revtim\yr1998\mo8\dy14\hr12\min4}{\version2}{\edmins0}{\nofpages4}{\nofwords851}{\nofchars4856}{\*\company  }{\vern57431}}\paperw11906\paperh16838\margl1701\margr1701\margt1985\margb1701 
\deftab851\widowctrl\ftnbj\aenddoc\pgnstart187\hyphcaps0\formshade \fet0\sectd \pgnrestart\pgnstarts187\linex0\headery851\footery992\colsx425\endnhere {\header \pard\plain \s15\qj\nowidctlpar\tqc\tx4320\tqr\tx8640\pvpara\phmrg\posxr\posy0 
\f29\fs21\kerning2 {\field{\*\fldinst {\cs17 PAGE  }}{\fldrslt {\cs17\lang1024 189}}}{\cs17 
\par }\pard \s15\qj\ri360\nowidctlpar\tqc\tx4320\tqr\tx8640 {\f5\fs20 Chapter 13   ROM programming\tab \tab }
\par }{\footer \pard\plain \s16\qj\ri360\nowidctlpar\tqc\tx4320\tqr\tx8640 \f29\fs21\kerning2 
\par }{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qj\nowidctlpar \f29\fs21\kerning2 {\f5\fs28 Chapter 13\tab ROM programming}{\fs28 
\par }{\fs22 
\par }{\f5\fs22 This chapter describes how to store a program into a ROM in the stand-alone system.  Before reading this chapter, it is recommended to thoroughly read Chapters, \ldblquote 6 Programming on i8086\rdblquote  and \ldblquote 12 Linker lld
\rdblquote .
\par 
\par 
\par }{\b\f5\fs24 13.1\tab Structure of ROM program
\par }{\f5\fs22 This section first describes segment placements of the ROM program, and then explains how to relocate the segments using the linker lld.
\par 
\par }{\b\f5\fs22 13.1.1\tab Segments
\par }{\f5\fs22 The LSI C-86 places programs and data in segments shown in Table 13.1.
\par 
\par }\trowd \trgaph99\trleft567\trbrdrt\brdrdb\brdrw15 \trbrdrb\brdrdb\brdrw15 \clbrdrt\brdrdb\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx4536\clbrdrt\brdrdb\brdrw15 \clbrdrl\brdrs\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx5954\clbrdrt\brdrdb\brdrw15 \clbrdrb
\brdrs\brdrw15 \cellx7301\clbrdrt\brdrdb\brdrw15 \clbrdrb\brdrs\brdrw15 \cellx8600 \pard \qj\nowidctlpar\intbl {\f11\fs22 \cell }{\f5\fs22 Segment name\cell Group name\cell Class name\cell }\pard \widctlpar\intbl {\f11\fs22 \row }\trowd 
\trgaph99\trleft567\trbrdrt\brdrdb\brdrw15 \trbrdrb\brdrdb\brdrw15 \cellx4536\clbrdrl\brdrs\brdrw15 \cellx5954\cellx7301\cellx8600 \pard \qj\sl-300\slmult0\nowidctlpar\intbl {\f11\fs22 Program with S or D model\cell TEXT\cell CGROUP\cell CODE\cell }\pard 
\widctlpar\intbl {\f11\fs22 \row }\pard \qj\sl-300\slmult0\nowidctlpar\intbl {\f11\fs22 Program with P or L model\cell x_TEXT\cell \cell CODE\cell }\pard \widctlpar\intbl {\f11\fs22 \row }\pard \qj\sl-300\slmult0\nowidctlpar\intbl {\f11\fs22 
Initialized data\cell DATA\cell DGROUP\cell DATA\cell }\pard \widctlpar\intbl {\f11\fs22 \row }\pard \qj\sl-300\slmult0\nowidctlpar\intbl {\f11\fs22 Uninitialized data\cell BSS\cell DGROUP\cell DATA\cell }\pard \widctlpar\intbl {\f11\fs22 \row }\pard 
\qj\sl-300\slmult0\nowidctlpar\intbl {\f11\fs22 Initialized far data\cell x_n_DATA\cell \cell FAR_DATA\cell }\pard \widctlpar\intbl {\f11\fs22 \row }\trowd \trgaph99\trleft567\trbrdrt\brdrdb\brdrw15 \trbrdrb\brdrdb\brdrw15 \clbrdrb\brdrdb\brdrw15 
\cellx4536\clbrdrl\brdrs\brdrw15 \clbrdrb\brdrdb\brdrw15 \cellx5954\clbrdrb\brdrdb\brdrw15 \cellx7301\clbrdrb\brdrdb\brdrw15 \cellx8600 \pard \qj\sl-300\slmult0\nowidctlpar\intbl {\f11\fs22 Uninitialized far data\cell x_n_BSS\cell \cell FAR_BSS\cell 
}\pard \widctlpar\intbl {\f11\fs22 \row }\pard \qj\nowidctlpar {\fs22 
\par }\pard \qc\nowidctlpar {\f5\fs22 Table 13.1:  Segments generated by compiler
\par }\pard \qj\nowidctlpar {\f5\fs22 
\par When storing these segments into a ROM, }{\f11\fs22 TEXT}{\f5\fs22  and }{\f11\fs22 x_TEXT}{\f5\fs22  are placed in the ROM since they are program codes.  Since }{\f11\fs22 BSS}{\f5\fs22  and }{\f11\fs22 x_n_BSS}{\f5\fs22 
 are variable data, they must be placed in a RAM.
\par However, since }{\f11\fs22 DATA}{\f5\fs22  and }{\f11\fs22 x_n_DATA}{\f5\fs22  are initialized, it is necessary to store them in the ROM.  Additionally, since data placed in the ROM is not changed during execution of the program, data placed in }{
\f11\fs22 DATA}{\f5\fs22  and }{\f11\fs22 x_n_DATA}{\f5\fs22  is not a variable, but functions as if it is a constant.  Great care should be taken on this point.
\par \page However, there are some exceptions.  }{\f11\fs22 DATA}{\f5\fs22  segment containing initialized near data is automatically copied from the ROM to the RAM as the program execution is started.
\par Since }{\f11\fs22 DATA }{\f5\fs22 and }{\f11\fs22 BSS}{\f5\fs22  form a single }{\f11\fs22 DGROUP}{\f5\fs22 , they are gathered and placed in the RAM.  Therefore, the near }{\f11\fs22 DATA }{\f5\fs22 segment is handled as an initialized variable.
\par This special }{\f11\fs22 DATA}{\f5\fs22  segment process is executed by the ghost segment function of the }{\f11\fs22 lld}{\f5\fs22  and initial setting module \ldblquote }{\f11\fs22 crom}{\f5\fs22 \rdblquote  (described later) for the ROM program.
\par 
\par }{\b\f5\fs22 13.1.2\tab Segment placement
\par }{\f5\fs22 At the beginning of the initial setting module }{\f11\fs22 crom.p86}{\f5\fs22 , the following segments are declared.
\par 
\par }\trowd \trgaph108\trleft284 \cellx1950\cellx2694\cellx4536\cellx5387\cellx9072 \pard \qj\nowidctlpar\intbl {\f11\fs20 TEXT}{\f5\fs22 \cell }{\f11\fs20 CSEG}{\f5\fs22 \cell \cell \cell }{\f11\fs20 ; code}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 
\row }\trowd \trgaph108\trleft284 \cellx1950\cellx2694\cellx4536\cellx5387\cellx9072 \pard \qj\nowidctlpar\intbl {\f11\fs20 _GHOST_DATA}{\f5\fs22 \cell }{\f11\fs20 CSEG}{\f5\fs22 \cell \cell }{\f11\fs20 PARA}{\f5\fs22 \cell }{\f11\fs20 
; data in ROM, copied to RAM}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f11\fs20 FAR_DATA}{\f5\fs22 \cell }{\f11\fs20 DSEG}{\f5\fs22 \cell }{\f11\fs20 \lquote FAR_DATA\rquote }{\f5\fs22 \cell }{\f11\fs20 PARA}{
\f5\fs22 \cell }{\f11\fs20 ; far data is placed in ROM}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f11\fs20 RESETVEC}{\f5\fs22 \cell }{\f11\fs20 CSEG}{\f5\fs22 \cell }{\f11\fs20 \lquote RESETVEC\rquote }{\f5\fs22 
\cell \cell }{\f11\fs20 ; JMPF}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f5\fs22 \cell \cell \cell \cell \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f11\fs20 DATA}{\f5\fs22 \cell 
}{\f11\fs20 DSEG}{\f5\fs22 \cell \cell }{\f11\fs20 PARA}{\f5\fs22 \cell }{\f11\fs20 ; data in RAM}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f11\fs20 BSS}{\f5\fs22 \cell }{\f11\fs20 DSEG}{\f5\fs22 \cell \cell 
\cell }{\f11\fs20 ; bss in RAM}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f11\fs20 ENDBSS}{\f5\fs22 \cell }{\f11\fs20 DSEG}{\f5\fs22 \cell \cell \cell }{\f11\fs20 ; end of bss}{\f5\fs22 \cell }\pard 
\widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f11\fs20 XSTACK}{\f5\fs22 \cell }{\f11\fs20 DSEG}{\f5\fs22 \cell \cell }{\f11\fs20 STACK}{\f5\fs22 \cell }{\f11\fs20 ; stack base}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard 
\qj\nowidctlpar\intbl {\f11\fs20 ENDSTK}{\f5\fs22 \cell }{\f11\fs20 DSEG}{\f5\fs22 \cell \cell \cell }{\f11\fs20 ; stack top}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f5\fs22 \cell \cell \cell \cell \cell 
}\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f11\fs20 FAR_BSS}{\f5\fs22 \cell }{\f11\fs20 DSEG}{\f5\fs22 \cell }{\f11\fs20 \lquote FAR_BSS\rquote }{\f5\fs22 \cell }{\f11\fs20 PARA}{\f5\fs22 \cell }{\f11\fs20 ; far bss}{\f5\fs22 
\cell }\pard \widctlpar\intbl {\f5\fs22 \row }\pard \qj\nowidctlpar\intbl {\f11\fs20 END_FAR_BSS}{\f5\fs22 \cell }{\f11\fs20 DSEG}{\f5\fs22 \cell }{\f11\fs20 \lquote END_FAR_BSS\rquote }{\f5\fs22 \cell }{\f11\fs20 PARA}{\f5\fs22 \cell }{\f11\fs20 
; end of far bss}{\f5\fs22 \cell }\pard \widctlpar\intbl {\f5\fs22 \row }\trowd \trgaph108\trleft284 \cellx1950\cellx2694\cellx4536\cellx5387\cellx9072 \pard \qj\nowidctlpar\intbl {\f5\fs22 \cell \cell \cell \cell \cell }\pard \widctlpar\intbl {\f5\fs22 
\row }\pard \qj\li284\nowidctlpar {\f5\fs22 
\par }\pard \qj\nowidctlpar {\f5\fs22 The order of this declaration specifies the segment placements.  It is necessary to put }{\f11\fs22 crom}{\f5\fs22  at the beginning during linking.
\par 
\par The following describes overview of each segment.
\par 
\par The near program codes are gathered in the }{\f11\fs22 TEXT}{\f5\fs22  segment.
\par The linker }{\f11\fs22 llb}{\f5\fs22  outputs the contents of the }{\f11\fs22 DATA}{\f5\fs22  segment to the next }{\f11\fs22 _GHOST_DATA}{\f5\fs22  segment.  Data output to this segment is copied to the }{\f11\fs22 DATA}{\f5\fs22 
 segment on the RAM during initial setting of the program.
\par For details of the ghost segment, see section 12.4, Ghost segment.
\par \page The class of the }{\f11\fs22 TEXT}{\f5\fs22  and}{\f11\fs22  _GHOST_DATA}{\f5\fs22  segments is }{\f11\fs22 \lquote CODE\rquote }{\f5\fs22 .  Therefore, all far functions are gathered after the}{\f11\fs22  _GHOST_DATA}{\f5\fs22  segment.
\par 
\par Since the }{\f11\fs22 FAR_DATA}{\f5\fs22  segment has the class }{\f11\fs22 \lquote FAR_DATA\rquote }{\f5\fs22 , all of far data in the program are gathered to this segment.
\par 
\par The }{\f11\fs22 RESETVEC}{\f5\fs22  segment contains the }{\f11\fs22 JMPF}{\f5\fs22  command (jump between segments) that jumps to the beginning of the }{\f11\fs22 TEXT}{\f5\fs22  segment.
\par Initialized near data is gathered and placed in the }{\f11\fs22 DATA}{\f5\fs22  segment.  However, the linker }{\f11\fs22 lld}{\f5\fs22  actually outputs the data to the }{\f11\fs22 _GHOST_DATA}{\f5\fs22  segment.
\par 
\par Uninitialized near data is gathered to the }{\f11\fs22 BSS}{\f5\fs22  segment.  }{\f11\fs22 ENDBSS}{\f5\fs22  is a marker showing the end of }{\f11\fs22 BSS}{\f5\fs22 .
\par The }{\f11\fs22 XSTACK}{\f5\fs22  segment is a program stack.  The default size is set to 500 bytes.  However, by changing the contents of }{\f11\fs22 crom.p86}{\f5\fs22  or specifying the size during linking, the stack size can be changed.  }{\f11\fs22 
ENDSTACK}{\f5\fs22  is a marker showing the top of the stack.
\par 
\par All of uninitialized far data is gathered to }{\f11\fs22 FAS_BSS}{\f5\fs22 .  }{\f11\fs22 END_FAR_BASS}{\f5\fs22  is a marker showing the end of }{\f11\fs22 FAR_BSS}{\f5\fs22 .
\par 
\par }{\b\f5\fs22 13.1.3\tab Segment re-placement
\par }{\f5\fs22 Segments to be placed in the ROM are those from }{\f11\fs22 TEXT}{\f5\fs22  to }{\f11\fs22 RESETVEC}{\f5\fs22 .  Segments after }{\f11\fs22 DATA}{\f5\fs22  should be placed in the RAM.
\par To re-place the segments, }{\f11\fs22 -T}{\f5\fs22  option provided by the linker }{\f11\fs22 lld}{\f5\fs22  is used.  When no segment name is put on }{\f11\fs22 -T}{\f5\fs22 
, the entire object is re-placed.  Therefore, to give ROM addresses, it is recommended to omit the segment name as shown below.
\par 
\par }\pard \qj\fi851\nowidctlpar {\f11\fs22 -T F0000
\par }\pard \qj\nowidctlpar {\fs22 
\par }{\f5\fs22 To specify a }{\f11\fs22 RAM}{\f5\fs22  address, }{\f11\fs22 DATA}{\f5\fs22  is given as a segment name.
\par 
\par }{\f11\fs22 \tab -TDATA 10000
\par }{\f5\fs22 
\par As a result, all segments after }{\f11\fs22 DATA}{\f5\fs22  are re-placed.
\par 
\par }{\b\f5\fs22 13.1.4\tab Jump commands at reset
\par }{\f5\fs22 i8086 starts execution from an address of }{\f11\fs22 FFFF : 0000}{\f5\fs22  at system reset.  Therefore, a segment jump command is generally put at }{\f11\fs22 FFFF : 0000}{\f5\fs22 .
\par \page The segment jump command that jumps to the beginning of the }{\f11\fs22 TEXT}{\f5\fs22  segment is placed in the }{\f11\fs22 RESETVEC}{\f5\fs22  segment.  When this segment is re-placed to }{\f11\fs22 FFFF : 0000}{\f5\fs22  using}{\f11\fs22 
 -TRESETVEC FFFF0}{\f5\fs22 , a jump command at system reset is generated.  If this jump command is not necessary, it is also not necessary to give this option.  If this option is not given, the }{\f11\fs22 RESETVEC}{\f5\fs22 
 segment is laced at a position after the segment with a class name of }{\f11\fs22 FAR_DATA}{\f5\fs22 , that is, at the end of the ROM area.
\par 
\par When using }{\f11\fs22 -TRESETVEC FFFF0}{\f5\fs22 , it is also absolutely necessary to specify}{\f11\fs22  -TDATA }{\i\f11\fs22 seg}{\f5\fs22 .  Otherwise, all segments after the segment that specifies the }{\f11\fs22 -T}{\f5\fs22 
 option are re-placed.  Thus, all segments after the }{\f11\fs22 DATA}{\f5\fs22  segment are placed after }{\f11\fs22 RESETVEC}{\f5\fs22 .
\par 
\par Additionally, it is recommended not to re-place segments unless }{\f11\fs22 .HEX}{\f5\fs22  files are created.  If }{\f11\fs22 .COM}{\f5\fs22  files or }{\f11\fs22 .EXE}{\f5\fs22  files are created, this may result in a huge file.
\par 
\par 
\par }{\b\f5\fs24 13.2\tab Initial setting module}{\b\f11\fs24  crom}{\b\fs24 
\par }{\f5\fs22 What the ROM program must do first is several initialization processes.  The module }{\f11\fs22 crom.p86}{\f5\fs22  performs the initialization processes.  (Depending on the type of installer, crom.p86 is stored in }{\f11\fs22 instpath\\src\\
lib\\crom.p86}{\f5\fs22  under the directory }{\f11\fs22 instpath}{\f5\fs22 .)
\par 
\par The }{\f11\fs22 crom}{\f5\fs22  is a prototype in which general processes are described.  In most cases, the }{\f11\fs22 crom}{\f5\fs22 
 cannot be used as it is.  It is absolutely necessary that the user must change the contents of this file corresponding to the target system.
\par 
\par }}